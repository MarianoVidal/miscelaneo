@startuml

skinparam classAttributeIconSize 0

class Equipo {
+calcularPrecio(): Real
+calcularConsumo(): Real
-calcularIVA(): Real
}

abstract class EquipoBuilder <<Builder>> {
+EquipoBuilder(catalogo: Catalogo)
+<<abstract>> colocarProcesador()
+<<abstract>> colocarMemoriaRAM()
+<<abstract>> colocarDisco()
+<<abstract>> colocarTarjetaGrafica()
+<<abstract>> colocarGabinete()
+construirEquipo(): Equipo
}

class EquipoBasicoBuilder <<ConcreteBuilderA>> extends EquipoBuilder {
+EquipoBasicoBuilder(catalogo: Catalogo)
}
class EquipoIntermedioBuilder <<ConcreteBuilderB>> extends EquipoBuilder {
+EquipoIntermedioBuilder(catalogo: Catalogo)
}
class EquipoGamerBuilder <<ConcreteBuilderC>> extends EquipoBuilder {
+EquipoGamerBuilder(catalogo: Catalogo)
}

class Presupuesto {
-nombreSolicitante: String
-fechaRealizacion: Date
+calcularPresupuesto(): Real
}

class Componente <<Component, Leaf>> {
-nombre: String
-descripcion: String
-precio: Real
-consumo: Real
+getNombre(): String
+getDescripcion(): String
+getPrecio(): Real
+getConsumo(): Real
}

interface IGabinete {
+<<abstract>> obtenerFuente(): Sring
}
class GabineteEstandar implements IGabinete {
+GabineteEstandar(precio: Real, consumo: Real)
}
class GabineteIntermedio implements IGabinete {
+EquipoIntermedioBuilder(precio: Real)
}
class GabineteGamer <<Composite>> implements IGabinete {
+GabineteGamer(precio: Real, consumo: Real)
+agregarComponente(c: Componente)
+quitarComponente(c: Componente)
+obtenerConsumoComponentes(): Real
}

class Catalogo {
+getComponente(descripcion: String): Componente
}

class Tecnico {}

GabineteGamer --> Componente: - componentes *

EquipoBasicoBuilder ..> Equipo
EquipoIntermedioBuilder ..> Equipo
EquipoGamerBuilder ..> Equipo

Equipo --> Componente: - componentes *
Catalogo --> Componente: - componentes *

Presupuesto --> Equipo

Tecnico --> EquipoBuilder: constructor
Tecnico --> Catalogo: catalogo
EquipoBuilder --> Catalogo: catalogo
@enduml
