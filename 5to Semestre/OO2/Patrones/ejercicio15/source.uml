@startuml

skinparam classAttributeIconSize 0

class Equipo {
+calcularPrecio(): Real
+calcularConsumo(): Real
-calcularIVA(): Real
}

abstract class EquipoBuilder <<Builder>> {
+<<abstract>> colocarProcesador(componente: c)
+<<abstract>> colocarMemoriaRAM(componente: c)
+<<abstract>> colocarDisco(componente: c)
+<<abstract>> colocarTarjetaGrafica(componente: c)
+<<abstract>> colocarGabinete(componente: c)
+construirEquipo(): Equipo
}

class EquipoBasicoBuilder <<ConcreteBuilderA>> extends EquipoBuilder {}
class EquipoIntermedioBuilder <<ConcreteBuilderB>> extends EquipoBuilder {}
class EquipoGamerBuilder <<ConcreteBuilderC>> extends EquipoBuilder {}

class Presupuesto {
-nombreSolicitante: String
-fechaRealizacion: Date
+calcularPresupuesto(): Real
}

class Componente <<Component, Leaf>> {
-nombre: String
-descripcion: String
-precio: Real
-consumo: Real
+getNombre(): String
+getDescripcion(): String
+getPrecio(): Real
+getConsumo(): Real
}

abstract class Gabinete extends Componente {}
class GabineteEstandar extends Gabinete {}
class GabineteIntermedio extends Gabinete {}
class GabineteGamer <<Composite>> extends Gabinete {}

class Catalogo {
+getComponente(descripcion: String): Componente
}

class Tecnico {}

GabineteGamer --> Componente: - componentes *

EquipoBasicoBuilder ..> Equipo
EquipoIntermedioBuilder ..> Equipo
EquipoGamerBuilder ..> Equipo

Equipo --> Componente: - componentes *
Catalogo -right-> Componente: - componentes *

Presupuesto -up-> Equipo

Tecnico --> EquipoBuilder: constructor
Tecnico -left-> Catalogo: catalogo

@enduml
